""" 
Roussel Beranger (regnareb)

2013/09/20 - first release
           - check the patch UDIM instead of its current name
2013/09/23 - little fixes and readability improved
           - underscore instead of space in the patch names
           - delete underscores in shader names
2013/09/03 - add debug printing

"""

import mari
import os
import linecache
import logging


logger = logging.getLogger(__name__)



def renamePatchesAtOpenProject():
    """ Change the names of the patches in Mari by the name of the shader.
    Parse the obj file to do a dictionary with all the patches and their corresponding shader name
    Then rename accordingly all the patches of each object in Mari """

    objList = mari.geo.list() # List all the objects

    for currentObj in objList:
        if currentObj.hasMetadata("Renamed"): # Check if the object has already been renamed
            logger.info('%s : Obj already renamed' % (currentObj))
            pass
        else:
            maryPatchesDict = {}

            mari.geo.setCurrent(currentObj) # Select the object
            versionList = currentObj.versionList() # Get version list to...
            modelPath = versionList[0].path() # ... get the geometry path's file

            try:
                if os.path.isfile(modelPath):
                    pass
            except IOError:
                logger.error('The original .obj file is missing')
                pass
            else:
                with open(modelPath, "r") as objFile: # Read the .obj file
                    line_current = 0
                    line_last = 0

                    for line in objFile:

                        if 'usemtl' in line:  # Search for the shader name line in the .obj file
                            shaderTMP = line[7:].strip().replace('_', '')
                            line_tmp = line_current
                            run_once = 1
                            logger.debug('%s : Last = %s | tmp = %s' % (shaderTMP, line_last, line_tmp))

                            while line_tmp != line_last:
                                # Cycle through the file in reverse order from the line where 'usemtl' was met 
                                line_str = linecache.getline(modelPath, line_tmp)

                                if 'vt' in line_str and run_once == 1: # Search for the position of the UV patch assigned to that shader (only run once per shader)
                                    horizontalN = int(line_str[3]) + 1
                                    verticalN = int(line_str[12])
                                    udim = "10%s%s" % (verticalN, horizontalN)
                                    run_once = 0

                                    try: # Check if the patch key exists in the dictionary
                                        maryPatchesDict[udim]
                                    except KeyError: # Create the key and value in the dictionary if it does not exist
                                        maryPatchesDict[udim] = "%s_%s" % (udim, shaderTMP)
                                    else: # Verify if the shader is not already listed in the key of the dictionary, and add it if it's not the case
                                        if maryPatchesDict[udim].find(shaderTMP) == -1 :
                                            maryPatchesDict[udim] = "%s_%s" % (maryPatchesDict[udim], shaderTMP)
                                            
                                if run_once == 0: # Stop the loop if the UV coordinates are found
                                    break 

                                line_tmp -= 1 # Cycle in reverse
                            line_last = line_current
                        line_current += 1

                if maryPatchesDict:
                    patchList = currentObj.patchList() # List all the patches for the current object

                    for currentPatch in patchList:
                        try: # Check if the current patch key exists in the dictionary
                            shaderName = maryPatchesDict[str(currentPatch.udim())] 
                        except KeyError:
                            logger.info('No shader found for the patch', currentPatch.name())
                            pass 
                        else:
                            currentPatch.setName(str(shaderName))  # Rename the Patch with the shader name

                    currentObj.setMetadata("Renamed", True)

                else:
                    logger.warning('No material information in the .obj')

mari.utils.connect(mari.projects.openedProject, renamePatchesAtOpenProject)
